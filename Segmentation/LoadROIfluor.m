function [fluor, stillScans] = LoadROIfluor(expt, fluor, loco)
% Load ROI-level fluorescence signals from file generated by GetROIfluor, without needing memory-hog ROI structure
savePath = strcat( expt.dir, expt.name, '_ROIfluor.mat' );
tic
fprintf('\nLoading %s', savePath);
if exist(savePath, 'file')
    load(savePath, 'Froi','Fnp','F','Fo','dFF','activity','Fall','Fback','Ftot','Fotot','dFFtot' ); % ,'nan_scan'
    % 'Fall','Fback','Froi','Fnp','Ftot','F','Fo','Fotot','dFF','dFFtot','activity','nan_scan','Nroi','Nruns','lpFreq'
    % 'Froi_lp','Fnp_lp',,'Fall_lp','Fback_lp','nan_scan','Nroi','Nruns','lpFreq'
    
    % Break fluor signals up by run and normalize using periods of stillness
    [fluor, stillScans] = StillNormalizedFluor(expt, fluor, loco, Fall, Fback, Ftot, Fotot, dFFtot, Froi, Fnp, F, Fo, dFF, activity);
    %{
    for runs = 1:expt.Nruns
        for r = 1:Nroi
            subplot(3,2,[1,3,5]);
            imshow( ROI(r).mask_2d, [] ); hold on;
            title( sprintf('ROI %i',r) );
            impixelinfo
            sp(1) = subplot(3,2,2); cla;
            plot( fluor(runs).F.ROI(:,r) ); hold on;
            plot( fluor(runs).Fo.ROI(:,r) ); ylabel('F');
            title(sprintf('[run, ROI] = [%i, %i]', runs, r));
            sp(2) = subplot(3,2,4); cla;
            plot( fluor(runs).dFF.ROI(:,r) ); ylabel('dF/F');
            sp(3) = subplot(3,2,6); cla;
            plot( fluor(runs).act.ROI(:,r) ); ylabel('Activity');
            linkaxes(sp,'x'); xlim([-Inf,Inf]);
            pause;
        end
    end
    %}
else
    error('%s does not exist!', savePath);
end
